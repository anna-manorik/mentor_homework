const WebSocket = require("ws");
const http = require("http");

const server = http.createServer((req, res) => {
  res.setHeader("Access-Control-Allow-Origin", "*"); 
  res.setHeader("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
  
  res.writeHead(200, { "Content-Type": "text/plain" });
  res.end("WebSocket Server");
});

const wss = new WebSocket.Server({ server });

let users = new Set();

function broadcastOnlineUsers() {
    const onlineCount = users.size;
    const message = JSON.stringify({ type: "online", count: onlineCount });

    console.log(`üü¢ –û–Ω–ª–∞–π–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: ${onlineCount}`);
    console.log("üì§ –í—ñ–¥–ø—Ä–∞–≤–ª—è—é:", message);

    users.forEach((client) => {
        if (client.readyState === WebSocket.OPEN) {
            client.send(message);
        }
    });
}

wss.on("connection", (ws) => {
  console.log("‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—ñ–¥–∫–ª—é—á–∏–≤—Å—è!");
  users.add(ws);
  
  
  // –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç—É –ø—ñ—Å–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
  ws.send(JSON.stringify({ message: "–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ!" }));
  broadcastOnlineUsers();
  // –û–±—Ä–æ–±–∫–∞ –≤—Ö—ñ–¥–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
  ws.on("message", (data) => {
    console.log("üì© –û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:", data);
   
    // –†–æ–∑—Å–∏–ª–∞—î–º–æ –æ—Ç—Ä–∏–º–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—Å—ñ–º –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏–º –∫–ª—ñ—î–Ω—Ç–∞–º
    wss.clients.forEach((client) => {
      if (client.readyState === WebSocket.OPEN) {
        client.send(data);
      }
    });
  });

  // –û–±—Ä–æ–±–∫–∞ —Ä–æ–∑'—î–¥–Ω–∞–Ω–Ω—è
  ws.on("close", () => {
    console.log("‚õî –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤—ñ–¥–∫–ª—é—á–∏–≤—Å—è");
    users.delete(ws);
    broadcastOnlineUsers();
  });


});

